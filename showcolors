#!/usr/bin/env python3

"""Show/test ANSI control sequences for color (and other text decorations)"""

###
# Author: Jeremy Dolan
# Rewritten in Python with better color cube presentation - March 2023
#
# This work is public domain. The author hereby releases all copyright.
# This software is provided free and “as is”, without warranties of any kind,
# express or implied, including but not limited to the warranties of fitness
# for a particular purpose or merchantability. In no event shall the author be
# liable for any damages arising in any way out of the use of this software.
###

r"""
ANSI SGR ("Select Graphic Rendition") parameters are of the form:
    ESC + '[' + semicolon-separated-list-of-numerical-codes + 'm'
where 'ESC' is the escape control code (0x1b).

 * In most interactive terminals, 'ESC' can be inserted by typing 'control-V'
   to enter verbatim insertion mode, followed by the 'Esc' key or 'control-['
 * In Python, we specify 'ESC' as the Unicode code point '\u001b'
 * In POSIX command-line contexts, the most portable solution is to use
   printf(1), because using escaped character codes with echo(1) is not
   standardized by POSIX and actual implementations are incompatible.
     printf: POSIX/IEEE Std 1003.1-2017, FreeBSD, Linux, and macOS all
             consistently interpret '\ooo' as the byte whose value is the 1-,
             2-, or 3-digit octal number 'ooo'. ('ESC' is octal 033.)
     echo: Backslash interpretation is "implementation-defined" according to
           POSIX.1, although the XSI extension mandates \0NNN replacement for
           octal byte codes. In practice, many echo implementations replace
           the sequence \0NNN with the character at octal value NNN; however,
           some require '-e' to interpret backslash escapes (e.g. GNU utils),
           while others have no support at all (e.g. macOS).)

## LINKS ##
General overview:
  https://en.wikipedia.org/wiki/ANSI_escape_code
Manual for xterm's control sequences; comprehensive documentation:
  https://invisible-island.net/xterm/ctlseqs/ctlseqs.html
Cf. Linux's console_codes(4) manpage -- `man 4 console_codes`, or:
  https://man7.org/linux/man-pages/man4/console_codes.4.html
Great tutorial of not just color control sequences, but the whole gamut:
  https://www.lihaoyi.com/post/BuildyourownCommandLinewithANSIescapecodes.html
Nice organization of the 256-color colorspace and associated RGB points:
  http://www.calmar.ws/vim/256-xterm-24bit-rgb-color-chart.html
Printf(1) specifications:
  https://pubs.opengroup.org/onlinepubs/9699919799/utilities/printf.html
  https://man.freebsd.org/cgi/man.cgi?query=printf&manpath=FreeBSD+12.0-RELEASE
  https://www.gnu.org/software/coreutils/manual/html_node/printf-invocation.html
"""


def print_underlined(s: str):
    print(f'\u001b[4m{s}\u001b[m')

def demo_color(code: str):
    print(f'\u001b[{code}m {code.ljust(3)} ', end='')

def demo256color(code: int):
    print(f' \u001b[38;5;{code}m{str(code).ljust(3)}', end='')

def demo24bitcolor(r,g,b):
    print(f' \u001b[38;2;{r};{g};{b}mR:{r} G:{g} B:{b}', end='')


print_underlined('8-color terminals')
print('Accessed with \\033[{30..37}m (foreground) and \\033[{40..47}m (background)')
for i in (3, 4):
    for j in range(8):
        demo_color(str(i) + str(j))
    print('\u001b[m')
print()


print_underlined('16-color terminals')
print('Accessed with \\033[{90..97}m (foreground) and \\033[{100..107}m (background)')
# It is said: Prior to the aixterm spec, brighter colors were accessed by using
#     the colors above combined with the bold text attribute.
# Default behavior in Terminal.app: same colors in a bolded font. Enable the
#     'Use bright colors for bold text' option in Preferences->Profiles
for i in (9, 10):
    for j in range(8):
        demo_color(str(i) + str(j))
    print('\u001b[m')
print()


print_underlined('256-color terminals')
print('Accessed with \\033[38;5;{0..255}m (fore) and \\033[48;5;{0..255}m (back)')
print('The 16 colors above, a 6x6x6 cubic colorspace, and a 24-step grayscale gradient')
# Display the original 16 ANSI colors as 2 rows of 8
for i in range(2):
    for j in range(8):
        demo256color(8*i + j)
    print()

# The middle 216 colors are arranged as a 6x6x6 cubic RGB colorspace
# To display it compactly, we display three 6x6 z-slices per row:
# 2 rows of slices, 6 lines per slice, 3 slices per line, 6 colors per slice 
for row in range(2):
    for line in range(6):
        for z_slice in range(3):
            for color in range(6):
                demo256color(16 + 108*row + 6*line + 36*z_slice + color)
            # add spacing between slices, or a new line after the third slice:
            print(end='  ' if z_slice<2 else '\n')

# The final 24 colors are a dark-to-light grayscale gradient; display as 2 rows of 12
for i in range(2):
    for j in range(12):
        demo256color(232 + 12*i + j)
    print()
print('\u001b[m')


print_underlined('24-bit-color terminals')
print('Accessed with \\033[38;2;<R>;<G>;<B>m (fore) and \\033[48;2;<R>;<G>;<B>m (back)')
print('Implemented in most modern *nix terminal emulators; not in OS X Terminal.app')
# TODO: print a couple of lines of smooth gradients as a compact visual test
# https://github.com/termstandard/colors
# https://gist.github.com/lifepillar/09a44b8cf0f9397465614e622979107f
# https://unix.stackexchange.com/questions/404414/print-true-color-24-bit-test-pattern
# for now, just attempt an off-shade of red, green, and blue, as a quick test:
demo24bitcolor(192,16,16)
print(end=' (red)   ')
demo24bitcolor(16,192,16)
print(end=' (green)   ')
demo24bitcolor(16,16,192)
print(end=' (blue)')
print('\u001b[m\n')


print_underlined('Other graphical control sequences')
print('Accessed with \\033[{0..9}m')
print('Zero is the default code, thus \\033[m also resets; six is rarely implemented')
print(' 0: reset\t1: \u001b[1mbold\u001b[m\t\t2: \u001b[2mdim\u001b[m\t\t'
       '3: \u001b[3mitalics\u001b[m\t4: \u001b[4munderline\u001b[m')
print(' 5: \u001b[5mblink\u001b[m\t6: \u001b[6mfast-blink\u001b[m\t'
       '7: \u001b[7minverse\u001b[m\t8: \u001b[8mhidden\u001b[m\t'
       '9: \u001b[9mstrike\u001b[m')