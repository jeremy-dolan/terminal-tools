#!/bin/sh

################################################################################
## logininfo - Print some terminal, host, and shell info at login             ##
## Author: Jeremy Dolan                                                       ##
## This work is public domain. The author hereby releases all copyright.      ##
################################################################################
## To allow more verbose output for login shells and less verbose output for  ##
## (interactive) subshells, run from shell rc file with "--login" appended    ##
## when invoked by the initial shell. For zsh, ksh, and bash:                 ##
##     logininfo $([[ $0 == -* ]] && echo "--login")                          ##
## will usually work. Another more robust option but for zsh and ksh only:    ##
##     logininfo $([[ -o login ]] && echo "--login")                          ##
################################################################################

color_enabled=1         # color output?
color_always=0          # only for login shells, or always?
ruler_color="35"        # floral pink (ANSI color code; null string will reset)
bannercolor="93"        # pastoral yellow
stats_color="92"        # arboreal green

ruler_enabled=1         # draw a "ruler" to show terminal width?
ruler_always=0          # only for login shells, or always?
ruler_autowidth=1       # stretch the ruler to fill the entire terminal width
ruler_width=80          # reference width used if ruler_autowidth=0

banner_enabled=1        # draw a hostname banner with figlet?
banner_always=0         # only for login shells, or always?
figlet_font="standard"  # see bottom of this script for some alternative fonts

#######################
## end configuration ##
#######################

terminal_width="$(tput cols)"
argument="$1"

# todo:
# perf test ruler's printf loop concatenating to a string first
# status $line1/2 should check line length < terminal width

main() {
    if is_enabled ruler; then
        if [ $ruler_autowidth -eq 1 ]; then
            draw_ruler "$terminal_width"
        else
            draw_ruler "$ruler_width"
        fi
    fi

    if is_enabled banner; then
        draw_banner
    fi

    draw_status
    reset_color
}


# check if the feature passed as $1 is enabled
is_enabled() {
    # eval is the best way to substitute into a var name with POSIX sh?
    eval "feature_enabled=\$${1}_enabled"
    eval "feature_always=\$${1}_always"

    if [ "$feature_enabled" -eq 1 ]; then
        if [ "$feature_always" -eq 1 ] || is_login_shell; then
            return 0
        fi
    fi
    return 1
}


draw_ruler() {
    if is_enabled color; then
        printf "\033[%sm" "$ruler_color"
    fi

    i=1
    while [ "$i" -le $(($1 / 10)) ]; do
        printf "%10d" $i
        i=$((i+1))
    done
    echo

    i=1
    while [ "$i" -le "$1" ]; do
        printf "%d" "$((i % 10))"
        i=$((i+1))
    done
    echo
}


draw_banner() { (
    if is_enabled color; then
        printf "\033[%sm" "$bannercolor"
    fi

    if [ -f ~/.nofiglet ]; then
        fig_name=""
    elif [ "$(which figlet)" ]; then
        fig_name="figlet"
    elif [ "$(which pyfiglet)" ]; then
        fig_name="pyfiglet"
    elif [ "$(which figlet.pl)" ]; then
        fig_name="figlet.pl"
    else
        fig_name=""
        name=$(basename "$0")
        echo "$name: No figlet found, skipping hostname banner."
        echo "$name: Consider 'brew install figlet' or 'pip install pyfiglet'"
        echo "$name: Or 'touch ~/.nofiglet' to silence this message."
    fi

    if [ "$fig_name" ]; then
        "$fig_name" -f "$figlet_font" "$(hostname -s)" |
            grep '\S' # remove figlet's extra spacing line
    fi
) }


draw_status() { (
    line1="$(uname -sr)   tty=$(tty)   TERM=$TERM"
    if [ -e /proc/loadavg ]; then
        # slice in the running/total process count:
        procs=$(awk '{ print $4, "procs" }' /proc/loadavg)
        line2=$(uptime | \
            sed -e "s@user\(s\?\),  load average@user\\1,  $procs,  loadavg@")
    else
        line2=$(uptime)
    fi

    if is_enabled color; then
        printf "\033[%sm" "$stats_color"
    fi
    printf "%s\n%s\n" "$line1" "$line2"
) }


reset_color() {
    if is_enabled color; then
        printf "\033[m"
    fi
}


is_login_shell() {
    if [ "$argument" = "--login" ]; then
        return 0
    else
        return 1
    fi
}


main


# Some figlet fonts that work well for a hostname:
#                    __ _
# standard          / _| | ___  _ __ __ _
#                  | |_| |/ _ \| '__/ _` |
#                  |  _| | (_) | | | (_| |
#                  |_| |_|\___/|_|  \__,_|
#                  
# lean                   _/_/  _/                                
#                     _/      _/    _/_/    _/  _/_/    _/_/_/   
#                  _/_/_/_/  _/  _/    _/  _/_/      _/    _/    
#                   _/      _/  _/    _/  _/        _/    _/     
#                  _/      _/    _/_/    _/          _/_/_/      
#
#                   .o88o. oooo                               
# roman             888 `" `888                               
#                  o888oo   888   .ooooo.  oooo d8b  .oooo.   
#                   888     888  d88' `88b `888""8P `P  )88b  
#                   888     888  888   888  888      .oP"888  
#                   888     888  888   888  888     d8(  888  
#                  o888o   o888o `Y8bod8P' d888b    `Y888""8o 
#
# colossal          .d888 888                           
#                  d88P"  888                           
#                  888    888                           
#                  888888 888  .d88b.  888d888  8888b.  
#                  888    888 d88""88b 888P"       "88b 
#                  888    888 888  888 888     .d888888 
#                  888    888 Y88..88P 888     888  888 
#                  888    888  "Y88P"  888     "Y888888 
#
# nancyj          .8888b dP                            
#                 88   " 88                            
#                 88aaa  88 .d8888b. 88d888b. .d8888b. 
#                 88     88 88'  `88 88'  `88 88'  `88 
#                 88     88 88.  .88 88       88.  .88 
#                 dP     dP `88888P' dP       `88888P8 
#
#                 .-:::::':::         ...    :::::::..    :::.     
# cosmic          ;;;'''' ;;;      .;;;;;;;. ;;;;``;;;;   ;;`;;    
#                 [[[,,== [[[     ,[[     \[[,[[[,/[[['  ,[[ '[[,  
#                 `$$$"`` $$'     $$$,     $$$$$$$$$c   c$$$cc$$$c 
#                  888   o88oo,.__"888,_ _,88P888b "88bo,888   888,
#                  "MM,  """"YUMMM  "YMMMMMP" MMMM   "W" YMM   ""` 
#
# These two fonts use Unicode versions of the codepage 437 characters for a
# retro "ANSI art" vibe. They're not in the standard figlet font set but can
# readily be found on the web in figlet and TheDraw font archives.
#
# 3d                   ██████  ████                              
#                     ███░░███░░███                              
#                    ░███ ░░░  ░███   ██████  ████████   ██████  
#                   ███████    ░███  ███░░███░░███░░███ ░░░░░███ 
#                  ░░░███░     ░███ ░███ ░███ ░███ ░░░   ███████ 
#                    ░███      ░███ ░███ ░███ ░███      ███░░███ 
#                    █████     █████░░██████  █████    ░░████████
#                   ░░░░░     ░░░░░  ░░░░░░  ░░░░░      ░░░░░░░░ 
#                  
# ANSI Shadow      ███████╗██╗      ██████╗ ██████╗  █████╗ 
#                  ██╔════╝██║     ██╔═══██╗██╔══██╗██╔══██╗
#                  █████╗  ██║     ██║   ██║██████╔╝███████║
#                  ██╔══╝  ██║     ██║   ██║██╔══██╗██╔══██║
#                  ██║     ███████╗╚██████╔╝██║  ██║██║  ██║
#                  ╚═╝     ╚══════╝ ╚═════╝ ╚═╝  ╚═╝╚═╝  ╚═╝
